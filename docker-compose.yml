version: '3.9'

services:
  nginx:
    image: nginx:1.23.4
    container_name: m3u8_proxy
    restart: unless-stopped
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
    volumes:
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      app: 
        condition: service_started

  app:
    build:
      context: .
      dockerfile: ./docker/app/Dockerfile
    restart: always 
    environment:
      - SETTING_MODULE=app.config.staging
      - DOCKER_STATUS=True
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - S3_REGION_NAME=${S3_REGION_NAME}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - PASSWORD_RESET_SECRET=${PASSWORD_RESET_SECRET}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - AUTHY_APPLICATION_NAME=${AUTHY_APPLICATION_NAME}
      - AUTHY_APPLICATION_ID=${AUTHY_APPLICATION_ID}
      - AUTHY_PRODUCTION_API_KEY=${AUTHY_PRODUCTION_API_KEY}
      - AUTHY_QRCODE_JWT_TIMEDELTA=${AUTHY_QRCODE_JWT_TIMEDELTA}

    ports:
      - 8000

  postgres:
    image: postgres:15
    container_name: m3u8_fb
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB'"]
      interval: 5s
      timeout: 5s
      retries: 1
      start_period: 5s
    volumes:
      - postgres_data:/var/lib/postgresql/data

volumes:
  postgres_data: